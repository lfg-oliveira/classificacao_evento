
@misc{duda_sgd_2019,
	title = {{SGD} momentum optimizer with step estimation by online parabola model},
	url = {http://arxiv.org/abs/1907.07063},
	abstract = {In stochastic gradient descent, especially for neural network training, there are currently dominating first order methods: not modeling local distance to minimum. This information required for optimal step size is provided by second order methods, however, they have many difficulties, starting with full Hessian having square of dimension number of coefficients. This article proposes a minimal step from successful first order momentum method toward second order: online parabola modelling in just a single direction: normalized \${\textbackslash}hat\{v\}\$ from momentum method. It is done by estimating linear trend of gradients \${\textbackslash}vec\{g\}={\textbackslash}nabla F({\textbackslash}vec\{{\textbackslash}theta\})\$ in \${\textbackslash}hat\{v\}\$ direction: such that \$g({\textbackslash}vec\{{\textbackslash}theta\}\_{\textbackslash}bot+{\textbackslash}theta{\textbackslash}hat\{v\}){\textbackslash}approx {\textbackslash}lambda ({\textbackslash}theta -p)\$ for \${\textbackslash}theta = {\textbackslash}vec\{{\textbackslash}theta\}{\textbackslash}cdot {\textbackslash}hat\{v\}\$, \$g= {\textbackslash}vec\{g\}{\textbackslash}cdot {\textbackslash}hat\{v\}\$, \${\textbackslash}vec\{{\textbackslash}theta\}\_{\textbackslash}bot={\textbackslash}vec\{{\textbackslash}theta\}-{\textbackslash}theta{\textbackslash}hat\{v\}\$. Using linear regression, \${\textbackslash}lambda\$, \$p\$ are MSE estimated by just updating four averages (of \$g\$, \${\textbackslash}theta\$, \$g{\textbackslash}theta\$, \${\textbackslash}theta{\textasciicircum}2\$) in the considered direction. Exponential moving averages allow here for inexpensive online estimation, weakening contribution of the old gradients. Controlling sign of curvature \${\textbackslash}lambda\$, we can repel from saddles in contrast to attraction in standard Newton method. In the remaining directions: not considered in second order model, we can simultaneously perform e.g. gradient descent. There is also discussed its learning rate approximation as \${\textbackslash}mu={\textbackslash}sigma\_{\textbackslash}theta / {\textbackslash}sigma\_g\$, allowing e.g. for adaptive SGD - with learning rate separately optimized (2nd order) for each parameter.},
	urldate = {2024-07-02},
	publisher = {arXiv},
	author = {Duda, Jarek},
	month = dec,
	year = {2019},
	note = {arXiv:1907.07063 [cs, stat]},
	keywords = {Computer Science - Machine Learning, Statistics - Machine Learning},
}
